[{"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/index.js":"1","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/reportWebVitals.js":"2","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/App.js":"3","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/AppRoutes.js":"4","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/services/auth-service.js":"5","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/services/profile-service.js":"6","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/contexts/AppContext.js":"7","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/services/delivery-service.js":"8","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/helpers/BotigaRouteFile.js":"9","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/services/product-service.js":"10","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/helpers/validators.js":"11","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/side-nav/side-nav.js":"12","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/Error/Error.js":"13","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/services/common-service.js":"14","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/helpers/axios.js":"15","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/helpers/Token.js":"16","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/helpers/util.js":"17","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/auth/login.js":"18","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/pages/store-screen/store-screen.js":"19","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/auth/verify-otp.js":"20","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/pages/promo-screen/promo-screen.js":"21","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/pages/delivery-screen/delivery-screen.js":"22","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/pages/promo-screen/coupon-screen.js":"23","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/pages/promo-screen/banner-screen.js":"24","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/BotigatextField/botiga-textfield.js":"25","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-list/product-list.js":"26","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/category-list/category-list.js":"27","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-view/product-view.js":"28","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/BotigaPageView/BotigaPageView.js":"29","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/services/order-service.js":"30","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/BotigaTabs/BotigaTabs.js":"31","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/search-bar/search-bar.js":"32","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/community-list/community-list.js":"33","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/select-all-order/select-all-order.js":"34","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/delivery-view/delivery-list/delivery-list.js":"35","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/delivery-view/delivery-details/delivery-details.js":"36","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/services/category-service.js":"37","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-view/product-details.js":"38","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-view/add-new-product.js":"39","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/Banners/Banners.js":"40","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/Image/Image.js":"41","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/coupon-view/coupon-list/coupon-list.js":"42","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/coupon-view/coupon-settings/coupon-settings.js":"43","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/helpers/generateDeliveryExcel.js":"44","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/BotigaCalendar/BotigaCalendar.js":"45","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/Banners/UploadBanner.js":"46","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-view/main-image-upload.js":"47","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-view/preview-secondary-image.js":"48","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-view/preview-main-image.js":"49","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-view/secondary-image-upload.js":"50","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/coupon-view/coupon-settings/add-new-coupon.js":"51"},{"size":598,"mtime":1614145208546,"results":"52","hashOfConfig":"53"},{"size":362,"mtime":1614145208548,"results":"54","hashOfConfig":"53"},{"size":6496,"mtime":1616681481212,"results":"55","hashOfConfig":"53"},{"size":909,"mtime":1616681481235,"results":"56","hashOfConfig":"53"},{"size":513,"mtime":1614145208548,"results":"57","hashOfConfig":"53"},{"size":2580,"mtime":1616681481275,"results":"58","hashOfConfig":"53"},{"size":96,"mtime":1614145208544,"results":"59","hashOfConfig":"53"},{"size":1234,"mtime":1616681481272,"results":"60","hashOfConfig":"53"},{"size":229,"mtime":1616681481265,"results":"61","hashOfConfig":"53"},{"size":2835,"mtime":1615115567940,"results":"62","hashOfConfig":"53"},{"size":2277,"mtime":1615867659967,"results":"63","hashOfConfig":"53"},{"size":2190,"mtime":1616681481243,"results":"64","hashOfConfig":"53"},{"size":1189,"mtime":1614186231431,"results":"65","hashOfConfig":"53"},{"size":210,"mtime":1614751416346,"results":"66","hashOfConfig":"53"},{"size":487,"mtime":1614193642657,"results":"67","hashOfConfig":"53"},{"size":617,"mtime":1614145208545,"results":"68","hashOfConfig":"53"},{"size":4471,"mtime":1620470479591,"results":"69","hashOfConfig":"53"},{"size":2378,"mtime":1614924978317,"results":"70","hashOfConfig":"53"},{"size":5512,"mtime":1616681481272,"results":"71","hashOfConfig":"53"},{"size":3853,"mtime":1616681481238,"results":"72","hashOfConfig":"53"},{"size":420,"mtime":1614924978327,"results":"73","hashOfConfig":"53"},{"size":13145,"mtime":1616681481271,"results":"74","hashOfConfig":"53"},{"size":2765,"mtime":1614924978327,"results":"75","hashOfConfig":"53"},{"size":301,"mtime":1614924978326,"results":"76","hashOfConfig":"53"},{"size":1813,"mtime":1615967584968,"results":"77","hashOfConfig":"53"},{"size":4648,"mtime":1616681481259,"results":"78","hashOfConfig":"53"},{"size":11996,"mtime":1615967584966,"results":"79","hashOfConfig":"53"},{"size":1306,"mtime":1614184370112,"results":"80","hashOfConfig":"53"},{"size":216,"mtime":1614751416338,"results":"81","hashOfConfig":"53"},{"size":340,"mtime":1616681481274,"results":"82","hashOfConfig":"53"},{"size":1128,"mtime":1614924978319,"results":"83","hashOfConfig":"53"},{"size":4522,"mtime":1616681481242,"results":"84","hashOfConfig":"53"},{"size":1875,"mtime":1616681481244,"results":"85","hashOfConfig":"53"},{"size":4088,"mtime":1616683294375,"results":"86","hashOfConfig":"53"},{"size":7267,"mtime":1616682335960,"results":"87","hashOfConfig":"53"},{"size":13765,"mtime":1618910453275,"results":"88","hashOfConfig":"53"},{"size":711,"mtime":1615867659969,"results":"89","hashOfConfig":"53"},{"size":730,"mtime":1614184370110,"results":"90","hashOfConfig":"53"},{"size":10248,"mtime":1619111472931,"results":"91","hashOfConfig":"53"},{"size":3650,"mtime":1619111401441,"results":"92","hashOfConfig":"53"},{"size":449,"mtime":1614171822498,"results":"93","hashOfConfig":"53"},{"size":1713,"mtime":1614924978320,"results":"94","hashOfConfig":"53"},{"size":1865,"mtime":1614924978322,"results":"95","hashOfConfig":"53"},{"size":4181,"mtime":1616757609815,"results":"96","hashOfConfig":"53"},{"size":2948,"mtime":1618910453266,"results":"97","hashOfConfig":"53"},{"size":1076,"mtime":1614751416337,"results":"98","hashOfConfig":"53"},{"size":901,"mtime":1614184370105,"results":"99","hashOfConfig":"53"},{"size":1070,"mtime":1614184370108,"results":"100","hashOfConfig":"53"},{"size":1002,"mtime":1614184370106,"results":"101","hashOfConfig":"53"},{"size":1574,"mtime":1614184370112,"results":"102","hashOfConfig":"53"},{"size":9135,"mtime":1615867888054,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"1c3bfrd",{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"106"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"106"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"106"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"106"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"106"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"106"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"106"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"106"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"106"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/index.js",[],["217","218"],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/reportWebVitals.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/App.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/AppRoutes.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/services/auth-service.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/services/profile-service.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/contexts/AppContext.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/services/delivery-service.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/helpers/BotigaRouteFile.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/services/product-service.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/helpers/validators.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/side-nav/side-nav.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/Error/Error.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/services/common-service.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/helpers/axios.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/helpers/Token.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/helpers/util.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/auth/login.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/pages/store-screen/store-screen.js",["219"],"import React, { useState, useEffect, useContext } from \"react\";\nimport appContext from \"../../contexts/AppContext\";\nimport CategoryList from \"../../components/category-list/category-list\";\nimport ProductList from \"../../components/product-list/product-list\";\nimport ProductView from \"../../components/product-view/product-view\";\nimport SearchBar from \"../../components/common/search-bar/search-bar\";\nimport BotigaPageView from \"../../components/common/BotigaPageView/BotigaPageView\";\n\nfunction getCategoryList(products) {\n    return products.map(category => ({\n        visible: category.visible,\n        categoryId: category.categoryId,\n        name: category.name,\n        count: category.products.length,\n        displaytext: category.products.length > 1 ? `${category.products.length} items` : `${category.products.length} item`\n    }));\n}\n\nfunction getProductList(products, selectedCategoryId) {\n    const selectedProduct = products.find(product => product.categoryId === selectedCategoryId);\n    if (selectedProduct) {\n        return selectedProduct.products;\n    } else {\n        return [];\n    }\n\n}\n\nfunction getSelectedProduct(products, selectedCategoryId, selectedProductId) {\n    const productList = getProductList(products, selectedCategoryId);\n    const product = productList.find(p => p.id === selectedProductId);\n    return product;\n}\n\nexport function StoreScreen() {\n    const screenName = 'Store';\n    const { fetchProductList, products, setError, updateCategoryVisiblityInProductList } = useContext(appContext);\n    const [selectedCategoryId, setSelectedCategoryId] = useState(null);\n    const [selectedProductId, setSelectedProductId] = useState(null);\n    const [isAddProduct, setIsAddProduct] = useState(false);\n    const [searchText, setSearchText] = useState('');\n\n    useEffect(() => {\n        initProductList();\n    }, []);\n\n    function selectedCategory(categoryId) {\n        setSelectedCategoryId(categoryId);\n        setSelectedProductId(null);\n        setIsAddProduct(false);\n    }\n\n    function selectProduct(productId) {\n        setIsAddProduct(false);\n        setSelectedProductId(productId);\n    }\n\n    function showProductAddForm() {\n        setSelectedProductId(null);\n        setIsAddProduct(true);\n    }\n\n    function hideShowAddProductForm() {\n        setSelectedProductId(null);\n        setIsAddProduct(false);\n    }\n\n    function setInitialCategorySelection(productList) {\n        if (productList.length > 0) {\n            const firstProductElement = productList[0];\n            if (firstProductElement) {\n                setSelectedCategoryId(firstProductElement.categoryId);\n            }\n        }\n    }\n\n    async function initProductList() {\n        try {\n            if (products.length > 0) {\n                setInitialCategorySelection(products);\n            } else {\n                const productList = await fetchProductList();\n                setInitialCategorySelection(productList);\n            }\n        } catch (err) {\n            setError(true, err);\n        }\n    }\n\n    async function updateScreen(requiresInitialSelection) {\n        try {\n            const productList = await fetchProductList();\n            hideShowAddProductForm();\n            if (typeof requiresInitialSelection === \"boolean\" && requiresInitialSelection) {\n                setInitialCategorySelection(productList);\n            }\n        } catch (err) {\n            setError(true, err);\n        }\n    }\n\n    function clearSearch() {\n        setSearchText('');\n    }\n\n    function setSearch(event) {\n        const { value } = event.target;\n        setSearchText(value);\n    }\n\n    const isAddProductBtnDisabled = getCategoryList(products).length === 0;\n    const filterdCategories = getCategoryList(products).filter(category => category.name.toLowerCase().includes(searchText.toLowerCase()));\n    const filterProducts = getProductList(products, selectedCategoryId).filter(product => product.name.toLowerCase().includes(searchText.toLowerCase()));\n\n    return (\n        <React.Fragment>\n            <SearchBar screenName={screenName} reset={clearSearch} handleChange={setSearch} searchValue={searchText} placeHolder={\"Search an item or category...\"} />\n            <BotigaPageView>\n                <CategoryList\n                    categories={filterdCategories}\n                    selectedCategoryId={selectedCategoryId}\n                    selectCategory={selectedCategory}\n                    updateScreen={updateScreen}\n                    setError={setError}\n                    updateCategoryVisiblityInProductList={updateCategoryVisiblityInProductList} />\n                <ProductList\n                    isAddProductBtnDisabled={isAddProductBtnDisabled}\n                    products={filterProducts}\n                    selectedProductId={selectedProductId}\n                    selectedCategoryId={selectedCategoryId}\n                    selectProduct={selectProduct}\n                    showProductAddForm={showProductAddForm}\n                    updateScreen={updateScreen}\n                    setError={setError} />\n                <ProductView\n                    selectedCategoryId={selectedCategoryId}\n                    product={getSelectedProduct(products, selectedCategoryId, selectedProductId)}\n                    isAddProduct={isAddProduct}\n                    hideShowAddProductForm={hideShowAddProductForm}\n                    updateScreen={updateScreen}\n                    setError={setError} />\n            </BotigaPageView>\n        </React.Fragment>\n    )\n\n}","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/auth/verify-otp.js",["220"],"import React, { useState, useEffect, useContext } from \"react\";\nimport OtpInput from 'react-otp-input';\nimport { withRouter } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { getOTP, verifyOtpValue } from \"../../services/auth-service\";\nimport botigaMainLogo from \"../../assets/icons/botiga-main-logo.svg\";\nimport { Token } from \"../../helpers/Token\";\nimport appContext from \"../../contexts/AppContext\";\nimport { HOME_VIEW } from \"../../helpers/BotigaRouteFile\";\nimport \"./index.css\";\n\nexport const VerifyOtp = withRouter(({ history, location }) => {\n    const { setError, setBrandName } = useContext(appContext);\n    const { state: { phone = '' } = {} } = location;\n    const [otp, setOtp] = useState('');\n    const [sessionId, setSessionId] = useState('');\n    const [timeRemaining, setTimeRemaining] = useState(-1);\n    const [isLoading, setIsLoading] = useState(false);\n    let timerId;\n\n    useEffect(() => {\n        getOtp();\n        return () => clearInterval(timerId);\n    }, []);\n\n    function tick() {\n        setTimeRemaining(t => {\n            if (t === 1) {\n                clearInterval(timerId);\n                return 0;\n            }\n            return t - 1;\n        });\n    }\n\n    function getOtp() {\n        sendOtp();\n        setTimeRemaining(30);\n        timerId = setInterval(tick, 1000);\n    }\n\n    function sendOtp() {\n        getOTP(phone).then(res => {\n            setSessionId(res.data['sessionId']);\n        }).catch(err => {\n            setError(true, err);\n        })\n    }\n\n    async function verifyEnterdOTP() {\n        const invalidOtpInput = (otp === '' || otp.length !== 6);\n        if (invalidOtpInput) {\n            setError(true, \"Please enter 6 digits OTP sent to your mobile\");\n            return;\n        }\n        try {\n            setIsLoading(true);\n            const response = await verifyOtpValue(phone, sessionId, otp);\n            if (response.data['message'] === 'createSeller') {\n                setError(true, \"Seller doesn't exists\");\n            } else {\n                const { headers: { authorization }, data } = response;\n                const token = new Token();\n                await token.setAuthenticationToken(authorization);\n                setBrandName(data.brandName);\n                goToHomeView();\n            }\n        } catch (err) {\n            setError(true, err);\n        } finally {\n            setIsLoading(false);\n        }\n    }\n\n    function goToHomeView() {\n        history.replace(HOME_VIEW);\n    }\n\n    const containerClass = isLoading ? 'verify-otp disable-container' : 'verify-otp';\n\n    return (\n        <div className={containerClass}>\n            {isLoading && (<div className=\"view-loader\"><CircularProgress /></div>)}\n            <div className=\"main-logo-conatiner\">\n                <img className=\"main-logo\" alt=\"botiga-logo\" src={botigaMainLogo} />\n            </div>\n            <div className=\"description\">Please enter OTP sent to your phone number {phone}</div>\n            <div className=\"otpForm\">\n                <OtpInput\n                    className=\"verify-otp-inputs\"\n                    value={otp}\n                    onChange={val => setOtp(val)}\n                    numInputs={6}\n                    separator={<span className=\"otp-seprator\" />} />\n                <div className=\"resend\">\n                    {timeRemaining === 0\n                        ? <div onClick={getOtp} className=\"resendbtn\">Resend OTP</div>\n                        : <div className=\"resendText\">Resend OTP in {timeRemaining}s</div>\n                    }\n                </div>\n                <Button onClick={verifyEnterdOTP} variant=\"contained\" color=\"primary\" size=\"large\" fullWidth disableElevation>Verify OTP</Button>\n            </div>\n        </div>\n    );\n})","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/pages/promo-screen/promo-screen.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/pages/delivery-screen/delivery-screen.js",["221"],"import React, { useContext, useEffect, useState } from \"react\";\nimport appContext from \"../../contexts/AppContext\";\nimport BotigaPageView from \"../../components/common/BotigaPageView/BotigaPageView\";\nimport { SearchBarDelivery } from \"../../components/common/search-bar/search-bar\";\nimport CommunityList from \"../../components/community-list/community-list\";\nimport DeliveryList from \"../../components/delivery-view/delivery-list/delivery-list\";\nimport DeliveryDetails from \"../../components/delivery-view/delivery-details/delivery-details\";\nimport { setDeliveryStatus, setDeliveryDelayed, getDeliveryByApartment, setDeliveryStatusBatch } from \"../../services/delivery-service\";\nimport { cancelOrder, setRefundCompleted } from '../../services/order-service';\nimport SelectAllOrder from \"../../components/select-all-order/select-all-order\";\n\n\nexport function DeliveryScreen() {\n    const screenName = 'Delivery';\n    const {\n        aggregateDelivery,\n        fetchAggregateDelivery,\n        setError,\n        setSelectedDeliveryDate,\n        selectedDeliverydate,\n        setAggregateDelivery,\n        showMainViewLoader,\n        hideMainViewLoader,\n        brandName\n    } = useContext(appContext);\n\n    const [deliveryFilterList, setDeliveryFilterList] = useState(['all']);\n    const [openOrdersId, setOpenOrderIds] = useState([]);\n    const [outforDeliveryIds, setOutForDeliveryIds] = useState([]);\n    const [selectedCommunityId, setSelectedCommunityId] = useState(null);\n    const [selectedDeliveryId, setSelectedDeliveryId] = useState(null);\n    const [searchText, setSearchText] = useState('');\n    const [isProcessingOrder, setProcessingOrder] = useState(false);\n\n    useEffect(() => {\n        initAggregateDeliveryList();\n        if (!selectedDeliverydate) {\n            setSelectedDeliveryDate(new Date())\n        }\n    }, []);\n\n    async function initAggregateDeliveryList() {\n        try {\n            if (aggregateDelivery.length > 0) {\n                setInitialCommunitySelection(aggregateDelivery);\n            } else {\n                const data = await fetchAggregateDelivery(new Date());\n                setInitialCommunitySelection(data);\n            }\n        } catch (err) {\n            setError(true, err);\n        }\n    }\n\n    function setInitialCommunitySelection(aggregateData) {\n        if (aggregateData.length > 0) {\n            const { apartment: { _id } } = (aggregateData[0] || {});\n            if (_id) {\n                setSelectedCommunityId(_id);\n            }\n        }\n    }\n\n    function clearSearch() {\n        setSearchText('');\n    }\n\n    function setSearch(event) {\n        const { value } = event.target;\n        setSearchText(value);\n    }\n\n    function setFilterList(status) {\n        const statusList = [status];\n        setDeliveryFilterList(statusList);\n    }\n\n    function getAllDeliveryForSelectedCommunity(id) {\n        if (!id) {\n            return [];\n        }\n        const deliveryForApt = aggregateDelivery.find(_delivery => _delivery.apartment._id === id) || {};\n        return (deliveryForApt.deliveries || []).filter(\n            _delivery => (_delivery.buyer.phone || '').includes(searchText)\n                || (_delivery.order.number || '').includes(searchText)\n        );\n    }\n\n    function getSelectedDelivery(selectedCommunityId, selectedDeliveryId) {\n        if (selectedCommunityId && selectedDeliveryId) {\n            const deliveryForApt = aggregateDelivery.find(_delivery => _delivery.apartment._id === selectedCommunityId) || {};\n            return (deliveryForApt.deliveries || []).find(_delivery => _delivery.order.number === selectedDeliveryId);\n        }\n        return null;\n    }\n\n    function getSelectedCommunity(selectedCommunityId) {\n        if (selectedCommunityId) {\n            const deliveryForApt = aggregateDelivery.find(_delivery => _delivery.apartment._id === selectedCommunityId) || {};\n            return (deliveryForApt.apartment || {});\n        }\n        return null;\n    }\n\n    function selectCommunity(id) {\n        setSelectedCommunityId(id);\n        setSelectedDeliveryId(null);\n    }\n\n    // Used for seting status to out and deliverd\n    async function setDeliveryStausForOrder(orderId, status) {\n        try {\n            setProcessingOrder(true);\n            await setDeliveryStatus(orderId, status);\n            updateDeliveryStatus(orderId, \"order-status-change\", status);\n        } catch (err) {\n            setError(true, err);\n        } finally {\n            setProcessingOrder(false);\n        }\n    }\n\n    // Used for order delayed operation\n    async function setOrderDelayed(orderId, newDate) {\n        try {\n            setProcessingOrder(true);\n            await setDeliveryDelayed(orderId, newDate);\n            getDeliverListByApartmentAndUpdateDelivery();\n        } catch (err) {\n            setError(true, err);\n        } finally {\n            setProcessingOrder(false);\n        }\n    }\n\n    // Used for order canceled\n    async function setOrderCancelled(orderId) {\n        try {\n            setProcessingOrder(true);\n            const { data: { refund } } = await cancelOrder(orderId);\n            updateDeliveryStatus(orderId, \"order-cancel\", \"cancelled\", refund);\n        } catch (err) {\n            setError(true, err);\n        } finally {\n            setProcessingOrder(false);\n        }\n    }\n\n    // Used for refund complete\n    async function setOrderRefundComplete(orderId) {\n        try {\n            setProcessingOrder(true);\n            const { data: { refund } } = await setRefundCompleted(orderId);\n            updateDeliveryStatus(orderId, \"refund-complete\", \"cancelled\", refund);\n        } catch (err) {\n            setError(true, err);\n        } finally {\n            setProcessingOrder(false);\n        }\n    }\n\n    // Update delivery by hitting api.\n    async function getDeliverListByApartmentAndUpdateDelivery() {\n        try {\n            const { data: { deliveries = [] } } = await getDeliveryByApartment(selectedCommunityId, selectedDeliverydate);\n            const selectectedCommunity = aggregateDelivery.find(_delivery => _delivery.apartment._id === selectedCommunityId);\n            if (selectectedCommunity) {\n                const updatedAggregateDelivery = aggregateDelivery.map(_delivery => {\n                    if (_delivery.apartment._id === selectedCommunityId) {\n                        return {\n                            ..._delivery,\n                            deliveries: deliveries.map(({ id, ...others }) => ({\n                                ...others,\n                                _id: id\n                            })),\n                            count: deliveries.length\n                        }\n                    }\n                    return _delivery;\n                });\n                setAggregateDelivery(updatedAggregateDelivery);\n            }\n        } catch (err) {\n            setError(true, err);\n        }\n    }\n\n    // Update delivery localy.\n    function updateDeliveryStatus(orderId, operationType, status, refund) {\n        try {\n            const selectectedCommunity = aggregateDelivery.find(_delivery => _delivery.apartment._id === selectedCommunityId);\n            if (selectectedCommunity) {\n                const updatedAggregateDelivery = aggregateDelivery.map(_delivery => {\n                    if (_delivery.apartment._id === selectedCommunityId) {\n                        return {\n                            ..._delivery,\n                            deliveries: _delivery.deliveries.map(_eachDelivery => {\n                                if (_eachDelivery._id === orderId) {\n                                    return transformDeliveryAfterUpdate(operationType, _eachDelivery, status, refund);\n                                }\n                                return _eachDelivery;\n                            })\n                        }\n                    }\n                    return _delivery;\n                });\n                setAggregateDelivery(updatedAggregateDelivery);\n            }\n        } catch (err) {\n            setError(true, err);\n        }\n    }\n\n    // Transform delivery obejct after staus change, cancel and refund opration\n    function transformDeliveryAfterUpdate(operationType, deliveryObj, status, refund) {\n        if (operationType === \"order-status-change\") {\n            return ({\n                ...deliveryObj,\n                order: {\n                    ...deliveryObj.order,\n                    status: status\n                }\n            });\n        } else if (operationType === \"order-cancel\" || operationType === \"refund-complete\") {\n            return ({\n                ...deliveryObj,\n                order: {\n                    ...deliveryObj.order,\n                    status: status\n                },\n                refund: deliveryObj.refund ? {\n                    ...deliveryObj.refund,\n                    ...refund\n                } : { ...refund }\n            });\n        } else {\n            return deliveryObj;\n        }\n    }\n\n    function setUnsetOrderListIds(id, type) {\n        if (type === \"only-open\") {\n            let tempList = [...openOrdersId];\n            if (tempList.includes(id)) {\n                tempList = tempList.filter(_id => _id !== id);\n            } else {\n                tempList = [...tempList, id];\n            }\n            setOpenOrderIds(tempList);\n        } else if (type === \"out\") {\n            let tempList = [...outforDeliveryIds];\n            if (tempList.includes(id)) {\n                tempList = tempList.filter(_id => _id !== id);\n            } else {\n                tempList = [...tempList, id];\n            }\n            setOutForDeliveryIds(tempList);\n        }\n    }\n\n    //For batch upadtes\n    async function batchDeliveriesUpdate(status) {\n        try {\n            showMainViewLoader();\n            if (status === 'out') {\n                await setDeliveryStatusBatch(status, openOrdersId);\n            } else if (status === 'delivered') {\n                await setDeliveryStatusBatch(status, outforDeliveryIds);\n            }\n            await getDeliverListByApartmentAndUpdateDelivery();\n            resetDeliverScreenState();\n        } catch (err) {\n            setError(true, err);\n        } finally {\n            hideMainViewLoader();\n        }\n    }\n\n\n    function handleDateChange(date) {\n        setSelectedDeliveryDate(date);\n        resetDeliverScreenState();\n    }\n\n    function resetDeliverScreenState() {\n        setDeliveryFilterList(['all']);\n        setOpenOrderIds([]);\n        setOutForDeliveryIds([]);\n        setSearchText('');\n        setProcessingOrder('');\n        setSelectedDeliveryId(null);\n    }\n\n    return (\n        <React.Fragment>\n            <SearchBarDelivery\n                brandName={brandName}\n                aggregateDelivery={aggregateDelivery}\n                setError={setError}\n                selectedDeliverydate={selectedDeliverydate}\n                onDateChange={handleDateChange}\n                screenName={screenName}\n                reset={clearSearch}\n                handleChange={setSearch}\n                searchValue={searchText}\n                placeHolder={\"Enter order or phone number...\"} />\n            <BotigaPageView>\n                <CommunityList\n                    aggregateDeliveryForCommunity={aggregateDelivery}\n                    selectCommunity={selectCommunity}\n                    selectedCommunityId={selectedCommunityId} />\n                <DeliveryList\n                    setFilterList={setFilterList}\n                    deliveryFilterList={deliveryFilterList}\n                    selectedCommunityId={selectedCommunityId}\n                    selectedDeliveryId={selectedDeliveryId}\n                    setSelectedDeliveryId={setSelectedDeliveryId}\n                    deliveriesForSelectedCommunity={getAllDeliveryForSelectedCommunity(selectedCommunityId)}\n                    selectedOpenOrders={openOrdersId}\n                    selectedOutforDeliveryOrders={outforDeliveryIds}\n                    setUnsetOrderListIds={setUnsetOrderListIds} />\n                <DeliveryDetails\n                    setOrderDelayed={setOrderDelayed}\n                    setDeliveryStausForOrder={setDeliveryStausForOrder}\n                    setOrderCancelled={setOrderCancelled}\n                    setOrderRefundComplete={setOrderRefundComplete}\n                    selectedDelivery={getSelectedDelivery(selectedCommunityId, selectedDeliveryId)}\n                    selectedCommunity={getSelectedCommunity(selectedCommunityId)}\n                    isProcessingOrder={isProcessingOrder}\n                />\n            </BotigaPageView>\n            <SelectAllOrder\n                deliveriesForSelectedCommunity={getAllDeliveryForSelectedCommunity(selectedCommunityId)}\n                deliveryFilterList={deliveryFilterList}\n                setOpenOrderIds={setOpenOrderIds}\n                setOutForDeliveryIds={setOutForDeliveryIds}\n                selectedOpenOrders={openOrdersId}\n                selectedOutforDeliveryOrders={outforDeliveryIds}\n                batchDeliveriesUpdate={batchDeliveriesUpdate}\n            />\n        </React.Fragment>\n    );\n\n}\n","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/pages/promo-screen/coupon-screen.js",["222"],"import React, { useState, useEffect, useContext } from \"react\";\nimport appContext from \"../../contexts/AppContext\";\nimport CouponList from \"../../components/coupon-view/coupon-list/coupon-list\";\nimport CouponSettings from \"../../components/coupon-view/coupon-settings/coupon-settings\";\nimport BotigaPageView from \"../../components/common/BotigaPageView/BotigaPageView\";\n\nexport function CouponScreen() {\n    const { fetchCouponList, coupons, setError } = useContext(appContext);\n    const [selectedCouponId, setSelectedCouponId] = useState(null);\n    const [isAddCoupon, setIsAddCoupon] = useState(false);\n\n    useEffect(() => {\n        initCouponList();\n    }, []);\n\n    function setInitialCouponSelection(coupontList) {\n        if (coupontList.length > 0) {\n            const firstCouponElement = coupontList[0];\n            if (firstCouponElement) {\n                setSelectedCouponId(firstCouponElement.couponId);\n            }\n        }\n    }\n\n    async function initCouponList() {\n        try {\n            if (coupons.length > 0) {\n                setInitialCouponSelection(coupons);\n            } else {\n                const couponsList = await fetchCouponList();\n                setInitialCouponSelection(couponsList);\n            }\n        } catch (err) {\n            setError(true, err);\n        }\n    }\n\n    async function updateScreen(requiresInitialSelection) {\n        try {\n            const couponsList = await fetchCouponList();\n            setIsAddCoupon(false);\n            if (typeof requiresInitialSelection === \"boolean\" && requiresInitialSelection) {\n                setInitialCouponSelection(couponsList);\n            }\n        } catch (err) {\n            setError(true, err);\n        }\n    }\n\n    function selectCoupon(couponId) {\n        setSelectedCouponId(couponId);\n        setIsAddCoupon(false);\n    }\n\n    function openAddCouponForm() {\n        setIsAddCoupon(true);\n        setSelectedCouponId(null);\n    }\n\n    function closeAddCouponForm() {\n        setIsAddCoupon(false);\n        setSelectedCouponId(null);\n    }\n\n    function getSelectedCoupon(_selectedCouponId) {\n        return coupons.find(coupon => coupon.couponId === _selectedCouponId);\n    }\n\n    return (\n        <BotigaPageView>\n            <CouponList\n                selectedCouponId={selectedCouponId}\n                selectCoupon={selectCoupon}\n                coupons={coupons}\n                openAddCouponForm={openAddCouponForm}\n            />\n            <CouponSettings\n                isAddCoupon={isAddCoupon}\n                closeAddCouponForm={closeAddCouponForm}\n                coupon={getSelectedCoupon(selectedCouponId)}\n                setError={setError}\n                updateScreen={updateScreen}\n            />\n        </BotigaPageView>\n    )\n}","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/pages/promo-screen/banner-screen.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/BotigatextField/botiga-textfield.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-list/product-list.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/category-list/category-list.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-view/product-view.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/BotigaPageView/BotigaPageView.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/services/order-service.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/BotigaTabs/BotigaTabs.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/search-bar/search-bar.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/community-list/community-list.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/select-all-order/select-all-order.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/delivery-view/delivery-list/delivery-list.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/delivery-view/delivery-details/delivery-details.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/services/category-service.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-view/product-details.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-view/add-new-product.js",["223"],"import React, { useState, useEffect } from 'react'\nimport { Formik } from 'formik'\nimport TextField from '../common/BotigatextField/botiga-textfield'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Switch from '@material-ui/core/Switch'\nimport DeleteOutlineSharp from '@material-ui/icons/DeleteOutlineSharp'\nimport Button from '@material-ui/core/Button'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\n\nimport { SecondaryImageUploadComponent } from './secondary-image-upload'\nimport { MainImageUploadComponent } from './main-image-upload'\nimport {\n\tsaveProduct,\n\tdeleteProduct,\n\tupdateProduct\n} from '../../services/product-service'\nimport {\n\taddProductValidators,\n\tMAX_CHAR_DESCRIPTION\n} from '../../helpers/validators'\nimport { PreviewMainImage } from './preview-main-image'\nimport { PreviewSecondaryImage } from './preview-secondary-image'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport 'react-image-crop/dist/ReactCrop.css'\n\nconst units = ['kg', 'gms', 'lt', 'ml', 'piece', 'pieces']\n\nfunction isProductEmpty(product) {\n\treturn Object.keys(product).length === 0\n}\n\nfunction getMainProductImageObject(product) {\n\tif (isProductEmpty(product)) {\n\t\treturn null\n\t} else {\n\t\treturn {\n\t\t\timageUrl: product.imageUrlLarge,\n\t\t\timageUrlSmall: product.imageUrl\n\t\t}\n\t}\n}\n\nexport function AddNewProduct({\n\tselectedCategoryId,\n\trefresh,\n\tproduct,\n\thideShowAddProductForm,\n\tsetError\n}) {\n\tconst [isLoading, setIsLoading] = useState(false)\n\tconst [showDesc, setShowDesc] = useState(false)\n\tconst [mainImage, setMainImage] = useState(null)\n\tconst [otherImages, setOtherImages] = useState([])\n\tconst [quantity, unit] = (product.size || '').split(' ')\n\n\tconst initialValue = {\n\t\tproductName: product.name || '',\n\t\tmrp: product.mrp || '',\n\t\tprice: product.price || '',\n\t\tquantity: quantity || '',\n\t\tunit: unit || '',\n\t\tdescription: (product.description || '').replace(/(\\r\\n|\\n|\\r)/gm, '')\n\t}\n\n\tuseEffect(() => {\n\t\tconst desc = product.description ? true : false\n\t\tsetShowDesc(desc)\n\t}, [product.description])\n\n\tuseEffect(() => {\n\t\tsetMainImage(getMainProductImageObject(product))\n\t}, [product.imageUrlLarge, product.imageUrl])\n\n\tuseEffect(() => {\n\t\tsetOtherImages(product.secondaryImageUrls || [])\n\t}, [product.secondaryImageUrls])\n\n\tfunction addOtherImages(image) {\n\t\tsetOtherImages(images => [...images, image])\n\t}\n\n\tfunction removeImageAtIndex(index) {\n\t\tconst images = [...otherImages]\n\t\timages.splice(index, 1)\n\t\tsetOtherImages(images)\n\t}\n\n\tasync function removeProduct() {\n\t\ttry {\n\t\t\tsetIsLoading(true)\n\t\t\tawait deleteProduct(product.id, selectedCategoryId)\n\t\t\trefresh()\n\t\t} catch (err) {\n\t\t\tsetError(true, err)\n\t\t} finally {\n\t\t\tsetIsLoading(false)\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className={isLoading ? 'disable-container' : 'no-css'}>\n\t\t\t{isLoading && (\n\t\t\t\t<div className='view-loader'>\n\t\t\t\t\t<CircularProgress />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<Formik\n\t\t\t\tenableReinitialize\n\t\t\t\tvalidationSchema={addProductValidators}\n\t\t\t\tinitialValues={initialValue}\n\t\t\t\tonSubmit={async values => {\n\t\t\t\t\tconst { mrp, price } = values\n\t\t\t\t\tif (mrp) {\n\t\t\t\t\t\tconst mrpAsNumber = parseFloat(mrp)\n\t\t\t\t\t\tconst priceAsNumber = parseFloat(price)\n\t\t\t\t\t\tif (mrpAsNumber <= priceAsNumber) {\n\t\t\t\t\t\t\tsetError(true, 'MRP should be greater than Price')\n\t\t\t\t\t\t\treturn null\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst imageurl = mainImage ? mainImage.imageUrlSmall : ''\n\t\t\t\t\tconst imageUrlLarge = mainImage ? mainImage.imageUrl : ''\n\t\t\t\t\tconst description = showDesc ? values.description : ''\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsetIsLoading(true)\n\t\t\t\t\t\tif (isProductEmpty(product)) {\n\t\t\t\t\t\t\tawait saveProduct(\n\t\t\t\t\t\t\t\tselectedCategoryId,\n\t\t\t\t\t\t\t\tvalues.productName,\n\t\t\t\t\t\t\t\tprice,\n\t\t\t\t\t\t\t\tmrp,\n\t\t\t\t\t\t\t\tvalues.quantity,\n\t\t\t\t\t\t\t\tvalues.unit,\n\t\t\t\t\t\t\t\timageurl,\n\t\t\t\t\t\t\t\timageUrlLarge,\n\t\t\t\t\t\t\t\tdescription,\n\t\t\t\t\t\t\t\totherImages\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tawait updateProduct(\n\t\t\t\t\t\t\t\tproduct.id,\n\t\t\t\t\t\t\t\tselectedCategoryId,\n\t\t\t\t\t\t\t\tvalues.productName,\n\t\t\t\t\t\t\t\tvalues.price,\n\t\t\t\t\t\t\t\tvalues.mrp,\n\t\t\t\t\t\t\t\tvalues.quantity,\n\t\t\t\t\t\t\t\tvalues.unit,\n\t\t\t\t\t\t\t\timageurl,\n\t\t\t\t\t\t\t\timageUrlLarge,\n\t\t\t\t\t\t\t\tdescription,\n\t\t\t\t\t\t\t\totherImages,\n\t\t\t\t\t\t\t\tproduct.available\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t\trefresh()\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tsetError(true, err)\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tsetIsLoading(false)\n\t\t\t\t\t}\n\t\t\t\t}}>\n\t\t\t\t{({ handleSubmit, getFieldProps, touched, errors }) => (\n\t\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t\t<div className='product-details-body'>\n\t\t\t\t\t\t\t<div className='product-details-row'>\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tid='productName'\n\t\t\t\t\t\t\t\t\tlabel='Product Name'\n\t\t\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\t{...getFieldProps('productName')}\n\t\t\t\t\t\t\t\t\terror={touched.productName && errors.productName}\n\t\t\t\t\t\t\t\t\thelperText={errors.productName}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='product-details-row'>\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tid='mrp'\n\t\t\t\t\t\t\t\t\tlabel='MRP (Optional)'\n\t\t\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\t{...getFieldProps('mrp')}\n\t\t\t\t\t\t\t\t\terror={touched.mrp && errors.mrp}\n\t\t\t\t\t\t\t\t\thelperText={errors.mrp}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className='product-details-spacer' />\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tid='price'\n\t\t\t\t\t\t\t\t\tlabel='Selling Price'\n\t\t\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\t{...getFieldProps('price')}\n\t\t\t\t\t\t\t\t\terror={touched.price && errors.price}\n\t\t\t\t\t\t\t\t\thelperText={errors.price}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='product-details-row'>\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tclassName='product-details-small-input'\n\t\t\t\t\t\t\t\t\tid='quantity'\n\t\t\t\t\t\t\t\t\tlabel='Quantity'\n\t\t\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\t\t\t{...getFieldProps('quantity')}\n\t\t\t\t\t\t\t\t\terror={touched.quantity && errors.quantity}\n\t\t\t\t\t\t\t\t\thelperText={errors.quantity}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className='product-details-spacer' />\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tclassName='product-details-small-input'\n\t\t\t\t\t\t\t\t\tid='unit'\n\t\t\t\t\t\t\t\t\tselect\n\t\t\t\t\t\t\t\t\tlabel='Select'\n\t\t\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\t\t\t{...getFieldProps('unit')}\n\t\t\t\t\t\t\t\t\terror={touched.unit && errors.unit}\n\t\t\t\t\t\t\t\t\thelperText={errors.unit}>\n\t\t\t\t\t\t\t\t\t{units.map(value => (\n\t\t\t\t\t\t\t\t\t\t<MenuItem key={value} value={value}>\n\t\t\t\t\t\t\t\t\t\t\t<span className='menu-item-unit'>{value}</span>\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</TextField>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='product-details-row'>\n\t\t\t\t\t\t\t\t{mainImage ? (\n\t\t\t\t\t\t\t\t\tmainImage.imageUrl ? (\n\t\t\t\t\t\t\t\t\t\t<PreviewMainImage\n\t\t\t\t\t\t\t\t\t\t\tmainImage={mainImage}\n\t\t\t\t\t\t\t\t\t\t\tsetMainImage={setMainImage}\n\t\t\t\t\t\t\t\t\t\t\tsetIsLoading={setIsLoading}\n\t\t\t\t\t\t\t\t\t\t\tsetError={setError}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<MainImageUploadComponent\n\t\t\t\t\t\t\t\t\t\t\tsetMainImage={setMainImage}\n\t\t\t\t\t\t\t\t\t\t\tsetIsLoading={setIsLoading}\n\t\t\t\t\t\t\t\t\t\t\tsetError={setError}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<MainImageUploadComponent\n\t\t\t\t\t\t\t\t\t\tsetMainImage={setMainImage}\n\t\t\t\t\t\t\t\t\t\tsetIsLoading={setIsLoading}\n\t\t\t\t\t\t\t\t\t\tsetError={setError}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className='product-details-spacer' />\n\t\t\t\t\t\t\t\t<div className='secondary-container'>\n\t\t\t\t\t\t\t\t\t{otherImages.length > 0 ? (\n\t\t\t\t\t\t\t\t\t\totherImages.length === 4 ? (\n\t\t\t\t\t\t\t\t\t\t\totherImages.map((image, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<PreviewSecondaryImage\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\timageUrl={image}\n\t\t\t\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoveImageAtIndex={removeImageAtIndex}\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetIsLoading={setIsLoading}\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetError={setError}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t{otherImages.map((image, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<PreviewSecondaryImage\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\timageUrl={image}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoveImageAtIndex={removeImageAtIndex}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetIsLoading={setIsLoading}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetError={setError}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t\t\t<SecondaryImageUploadComponent\n\t\t\t\t\t\t\t\t\t\t\t\t\tisSmall={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\taddOtherImages={addOtherImages}\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetIsLoading={setIsLoading}\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetError={setError}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<SecondaryImageUploadComponent\n\t\t\t\t\t\t\t\t\t\t\tisSmall={false}\n\t\t\t\t\t\t\t\t\t\t\taddOtherImages={addOtherImages}\n\t\t\t\t\t\t\t\t\t\t\tsetIsLoading={setIsLoading}\n\t\t\t\t\t\t\t\t\t\t\tsetError={setError}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='product-details-row'>\n\t\t\t\t\t\t\t\t<div className='image_info_banner'>\n\t\t\t\t\t\t\t\t\t<div className='block_section'>\n\t\t\t\t\t\t\t\t\t\t<div className='primary'>format</div>\n\t\t\t\t\t\t\t\t\t\t<div className='secondary'>PNG | JPG | JPEG</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className='block_section'>\n\t\t\t\t\t\t\t\t\t\t<div className='primary'>dimension</div>\n\t\t\t\t\t\t\t\t\t\t<div className='secondary'> 1024 px x 1024 px</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className='block_section'>\n\t\t\t\t\t\t\t\t\t\t<div className='primary'>size</div>\n\t\t\t\t\t\t\t\t\t\t<div className='secondary'>Approx. 100KB</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='product-details-row'>\n\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\tclassName='product-details-description-text'\n\t\t\t\t\t\t\t\t\tvalue='Add Description'\n\t\t\t\t\t\t\t\t\tcontrol={<Switch color='primary' />}\n\t\t\t\t\t\t\t\t\tlabel='Add Description'\n\t\t\t\t\t\t\t\t\tlabelPlacement='start'\n\t\t\t\t\t\t\t\t\tchecked={showDesc}\n\t\t\t\t\t\t\t\t\tonChange={() => setShowDesc(!showDesc)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{showDesc ? (\n\t\t\t\t\t\t\t\t<div className='product-details-row'>\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t{...getFieldProps('description')}\n\t\t\t\t\t\t\t\t\t\tid='description'\n\t\t\t\t\t\t\t\t\t\tlabel='Product Description'\n\t\t\t\t\t\t\t\t\t\tmultiline\n\t\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\t\trows={3}\n\t\t\t\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\t\t\t\tinputProps={{ maxLength: MAX_CHAR_DESCRIPTION }}\n\t\t\t\t\t\t\t\t\t\trequiresCounterValidation={true}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='product-details-row-action'>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tdisabled={isProductEmpty(product)}\n\t\t\t\t\t\t\t\tonClick={removeProduct}\n\t\t\t\t\t\t\t\tstartIcon={<DeleteOutlineSharp />}>\n\t\t\t\t\t\t\t\tDelete Product\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<div className='product-details-row-action-btns'>\n\t\t\t\t\t\t\t\t<Button onClick={hideShowAddProductForm}>Cancel</Button>\n\t\t\t\t\t\t\t\t<div className='product-details-spacer' />\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\t\tdisableElevation>\n\t\t\t\t\t\t\t\t\tSave Changes\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t)}\n\t\t\t</Formik>\n\t\t</div>\n\t)\n}\n","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/Banners/Banners.js",["224"],"import React, { useEffect, useState, useContext } from 'react'\nimport appContext from '../../contexts/AppContext'\nimport { UploadBannerComponent } from './UploadBanner'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { Image } from '../../components/common/Image/Image'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { deleteProductImage } from '../../services/common-service'\nimport { updateBanners } from '../../services/profile-service'\n\nimport './index.css'\n\nfunction BannersHeader() {\n\treturn (\n\t\t<div className='banner-header-item'>\n\t\t\t<div className='banner-header-name'>BANNER</div>\n\t\t</div>\n\t)\n}\n\nfunction UploadBanner({\n\tindex,\n\tsetError,\n\tsetIsLoading,\n\tbanner,\n\tbanners,\n\tsetBannerAtIndex,\n\tremoveBannerAtIndex\n}) {\n\tasync function deleteBanner() {\n\t\ttry {\n\t\t\tsetIsLoading(true)\n\t\t\tlet bannerList = [...banners]\n\t\t\tconst nonEmptyBannersWithRemovedBanner = bannerList\n\t\t\t\t.map(_banner => (_banner !== banner ? _banner : null))\n\t\t\t\t.filter(_banner => _banner)\n\t\t\tawait deleteProductImage(banner)\n\t\t\tawait updateBanners(nonEmptyBannersWithRemovedBanner)\n\t\t\tremoveBannerAtIndex(index)\n\t\t} catch (err) {\n\t\t\tsetError(true, err)\n\t\t} finally {\n\t\t\tsetIsLoading(false)\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className='banner-row'>\n\t\t\t{banner ? (\n\t\t\t\t<div className='banner-preview-container'>\n\t\t\t\t\t<Image\n\t\t\t\t\t\tsrc={banner}\n\t\t\t\t\t\talt={`banner${index}`}\n\t\t\t\t\t\tclassName='banner-preview-img'\n\t\t\t\t\t/>\n\t\t\t\t\t<CloseIcon className='banner-preview-close' onClick={deleteBanner} />\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<UploadBannerComponent\n\t\t\t\t\tsetError={setError}\n\t\t\t\t\tsetIsLoading={setIsLoading}\n\t\t\t\t\tsetBannerAtIndex={setBannerAtIndex}\n\t\t\t\t\tbanners={banners}\n\t\t\t\t\tindex={index}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nexport function Banners() {\n\tconst [isLoading, setIsLoading] = useState(false)\n\tconst {\n\t\tbanners,\n\t\tfetchBannerList,\n\t\tupdateLocalBannersList,\n\t\tsetError\n\t} = useContext(appContext)\n\n\tuseEffect(() => {\n\t\tinitBannerList()\n\t}, [])\n\n\tasync function initBannerList() {\n\t\ttry {\n\t\t\tif (banners.filter(banner => banner).length === 0) {\n\t\t\t\tawait fetchBannerList()\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetError(true, err)\n\t\t}\n\t}\n\n\tfunction setBannerAtIndex(banner, index) {\n\t\tconst bannerList = [...banners]\n\t\tbannerList[index] = banner\n\t\tupdateLocalBannersList(bannerList)\n\t}\n\n\tfunction removeBannerAtIndex(index) {\n\t\tconst bannerList = [...banners]\n\t\tbannerList[index] = null\n\t\tupdateLocalBannersList(bannerList)\n\t}\n\n\tfunction _setIsLoading(value) {\n\t\tsetIsLoading(value)\n\t}\n\n\tconst containerClass = isLoading\n\t\t? 'banner-list-style disable-container'\n\t\t: 'banner-list-style'\n\n\treturn (\n\t\t<div className={containerClass}>\n\t\t\t{isLoading && (\n\t\t\t\t<div className='view-loader'>\n\t\t\t\t\t<CircularProgress />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<BannersHeader />\n\t\t\t<div className='banner-body'>\n\t\t\t\t<div className='banner-row'>\n\t\t\t\t\t<div className='banner_info'>\n\t\t\t\t\t\t<div className='block_section'>\n\t\t\t\t\t\t\t<div className='primary'>format</div>\n\t\t\t\t\t\t\t<div className='secondary'>PNG | JPG | JPEG</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='block_section'>\n\t\t\t\t\t\t\t<div className='primary'>dimension</div>\n\t\t\t\t\t\t\t<div className='secondary'> 960 px x 480 px</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='block_section'>\n\t\t\t\t\t\t\t<div className='primary'>size</div>\n\t\t\t\t\t\t\t<div className='secondary'>Approx. 100KB</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{banners.map((_banner, index) => (\n\t\t\t\t\t<UploadBanner\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\tsetError={setError}\n\t\t\t\t\t\tsetIsLoading={_setIsLoading}\n\t\t\t\t\t\tbanner={_banner}\n\t\t\t\t\t\tbanners={banners}\n\t\t\t\t\t\tsetBannerAtIndex={setBannerAtIndex}\n\t\t\t\t\t\tremoveBannerAtIndex={removeBannerAtIndex}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/Image/Image.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/coupon-view/coupon-list/coupon-list.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/coupon-view/coupon-settings/coupon-settings.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/helpers/generateDeliveryExcel.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/common/BotigaCalendar/BotigaCalendar.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/Banners/UploadBanner.js",["225"],"import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { getResizedBanner } from \"../../helpers/util\";\nimport 'react-image-crop/dist/ReactCrop.css';\n\n\nexport function UploadBannerComponent({ setError, setIsLoading, setBannerAtIndex, banners, index }) {\n    const onDrop = useCallback(acceptedFiles => {\n        acceptedFiles.forEach(file => {\n            getResizedBanner(file, _setBannerAtIndex, setIsLoading, setError, banners)\n        });\n    }, [banners]);\n\n    function _setBannerAtIndex(banner) {\n        setBannerAtIndex(banner, index);\n    }\n\n    const dropzoneConfig = { onDrop, accept: 'image/jpeg, image/png', maxFiles: 1, multiple: true };\n\n    const { getRootProps, getInputProps } = useDropzone(dropzoneConfig)\n\n    return (\n        <div className=\"banner-upload-image\" {...getRootProps()}>\n            <input {...getInputProps()} />\n            <div className=\"add-image-btn\">\n                Upload Banner\n            </div>\n            <div className=\"description\">or drag and drop files</div>\n        </div>\n    );\n}","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-view/main-image-upload.js",["226"],"import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone'\nimport AddIcon from '@material-ui/icons/Add';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { getResizedFile } from \"../../helpers/util\";\n\nexport function MainImageUploadComponent({ setMainImage, setIsLoading, setError }) {\n\n    const onDrop = useCallback(async (acceptedFiles) => {\n        getResizedFile(acceptedFiles.shift(), setMainImage, true, setIsLoading, setError);\n    }, []);\n\n    const { getRootProps, getInputProps } = useDropzone({ onDrop, noDrag: true, accept: 'image/jpeg, image/png', maxFiles: 1, multiple: false })\n\n    return (\n        <div className=\"main-upload-image\" {...getRootProps()}>\n            <input {...getInputProps()} />\n            <div className=\"add-main-image-btn\"><AddIcon /></div>\n            <div className=\"main-description\">MAIN IMAGE</div>\n        </div>\n    );\n}","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-view/preview-secondary-image.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-view/preview-main-image.js",[],"/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/product-view/secondary-image-upload.js",["227"],"import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport AddIcon from '@material-ui/icons/Add';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { getResizedFile } from \"../../helpers/util\";\n\n\nexport function SecondaryImageUploadComponent({ addOtherImages, isSmall, setIsLoading, setError }) {\n\n    const onDrop = useCallback(acceptedFiles => {\n        acceptedFiles.forEach(file => {\n            getResizedFile(file, addOtherImages, false, setIsLoading, setError);\n        });\n    }, []);\n\n    const dropzoneConfig = (isSmall\n        ? { onDrop, noDrag: true, accept: 'image/jpeg, image/png', maxFiles: 1, multiple: false }\n        : { onDrop, accept: 'image/jpeg, image/png', maxFiles: 4, multiple: true });\n\n    const { getRootProps, getInputProps } = useDropzone(dropzoneConfig)\n\n    function getSmallUplaod() {\n        return (\n            <div className=\"secondary-small-upload-image\" {...getRootProps()} >\n                <input {...getInputProps()} />\n                <AddIcon />\n                <div className=\"add-secondary-description\">Add</div>\n            </div>\n        );\n    }\n\n    function getLargeUpload() {\n        return (\n            <div className=\"upload-image\" {...getRootProps()}>\n                <input {...getInputProps()} />\n                <div className=\"add-image-btn\">\n                    Add more images\n                </div>\n                <div className=\"description\">or drag and drop files</div>\n            </div>\n        );\n    }\n\n    return isSmall ? getSmallUplaod() : getLargeUpload();\n}","/Users/varunmehta/Projects/botiga/botigaMerchantDashboard/src/components/coupon-view/coupon-settings/add-new-coupon.js",[],["228","229"],{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","severity":1,"message":"235","line":45,"column":8,"nodeType":"236","endLine":45,"endColumn":10,"suggestions":"237"},{"ruleId":"234","severity":1,"message":"238","line":26,"column":8,"nodeType":"236","endLine":26,"endColumn":10,"suggestions":"239"},{"ruleId":"234","severity":1,"message":"240","line":40,"column":8,"nodeType":"236","endLine":40,"endColumn":10,"suggestions":"241"},{"ruleId":"234","severity":1,"message":"242","line":14,"column":8,"nodeType":"236","endLine":14,"endColumn":10,"suggestions":"243"},{"ruleId":"234","severity":1,"message":"244","line":73,"column":5,"nodeType":"236","endLine":73,"endColumn":46,"suggestions":"245"},{"ruleId":"234","severity":1,"message":"246","line":81,"column":5,"nodeType":"236","endLine":81,"endColumn":7,"suggestions":"247"},{"ruleId":"234","severity":1,"message":"248","line":12,"column":8,"nodeType":"236","endLine":12,"endColumn":17,"suggestions":"249"},{"ruleId":"234","severity":1,"message":"250","line":11,"column":8,"nodeType":"236","endLine":11,"endColumn":10,"suggestions":"251"},{"ruleId":"234","severity":1,"message":"252","line":14,"column":8,"nodeType":"236","endLine":14,"endColumn":10,"suggestions":"253"},{"ruleId":"230","replacedBy":"254"},{"ruleId":"232","replacedBy":"255"},"no-native-reassign",["256"],"no-negated-in-lhs",["257"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initProductList'. Either include it or remove the dependency array.","ArrayExpression",["258"],"React Hook useEffect has missing dependencies: 'getOtp' and 'timerId'. Either include them or remove the dependency array.",["259"],"React Hook useEffect has missing dependencies: 'initAggregateDeliveryList', 'selectedDeliverydate', and 'setSelectedDeliveryDate'. Either include them or remove the dependency array.",["260"],"React Hook useEffect has a missing dependency: 'initCouponList'. Either include it or remove the dependency array.",["261"],"React Hook useEffect has a missing dependency: 'product'. Either include it or remove the dependency array. If 'setMainImage' needs the current value of 'product', you can also switch to useReducer instead of useState and read 'product' in the reducer.",["262"],"React Hook useEffect has a missing dependency: 'initBannerList'. Either include it or remove the dependency array.",["263"],"React Hook useCallback has missing dependencies: '_setBannerAtIndex', 'setError', and 'setIsLoading'. Either include them or remove the dependency array.",["264"],"React Hook useCallback has missing dependencies: 'setError', 'setIsLoading', and 'setMainImage'. Either include them or remove the dependency array.",["265"],"React Hook useCallback has missing dependencies: 'addOtherImages', 'setError', and 'setIsLoading'. Either include them or remove the dependency array.",["266"],["256"],["257"],"no-global-assign","no-unsafe-negation",{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},"Update the dependencies array to be: [initProductList]",{"range":"285","text":"286"},"Update the dependencies array to be: [getOtp, timerId]",{"range":"287","text":"288"},"Update the dependencies array to be: [initAggregateDeliveryList, selectedDeliverydate, setSelectedDeliveryDate]",{"range":"289","text":"290"},"Update the dependencies array to be: [initCouponList]",{"range":"291","text":"292"},"Update the dependencies array to be: [product.imageUrlLarge, product.imageUrl, product]",{"range":"293","text":"294"},"Update the dependencies array to be: [initBannerList]",{"range":"295","text":"296"},"Update the dependencies array to be: [_setBannerAtIndex, banners, setError, setIsLoading]",{"range":"297","text":"298"},"Update the dependencies array to be: [setError, setIsLoading, setMainImage]",{"range":"299","text":"300"},"Update the dependencies array to be: [addOtherImages, setError, setIsLoading]",{"range":"301","text":"302"},[1843,1845],"[initProductList]",[1083,1085],"[getOtp, timerId]",[1833,1835],"[initAggregateDeliveryList, selectedDeliverydate, setSelectedDeliveryDate]",[662,664],"[initCouponList]",[2122,2163],"[product.imageUrlLarge, product.imageUrl, product]",[1938,1940],"[initBannerList]",[491,500],"[_setBannerAtIndex, banners, setError, setIsLoading]",[477,479],"[setError, setIsLoading, setMainImage]",[529,531],"[addOtherImages, setError, setIsLoading]"]